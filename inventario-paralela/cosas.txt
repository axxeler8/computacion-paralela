clientconsole.java:
package com.empresa.cliente;

import com.empresa.inventario.InventarioService;
import com.empresa.inventario.Repuesto;
import com.empresa.inventario.Reserva;

import java.rmi.Naming;
import java.util.List;
import java.util.Scanner;

public class ClienteConsole {
    public static void main(String[] args) throws Exception {
        InventarioService svc = (InventarioService) Naming.lookup("rmi://localhost:1099/InventarioService");
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- Consola Cliente ---");
            System.out.println("1) Ver repuestos");
            System.out.println("2) Consultar repuesto por SKU");
            System.out.println("3) Ver reservas");
            System.out.println("4) Consultar reserva por ID");
            System.out.println("5) Salir");
            System.out.print("Selecciona una opción: ");
            int op = Integer.parseInt(sc.nextLine());

            switch (op) {
                case 1:
                    mostrarRepuestos(svc);
                    break;
                case 2:
                    consultarRepuestoPorSku(svc, sc);
                    break;
                case 3:
                    mostrarReservas(svc);
                    break;
                case 4:
                    consultarReservaPorId(svc, sc);
                    break;
                case 5:
                    System.out.println("Saliendo...");
                    sc.close();
                    System.exit(0);
                default:
                    System.out.println("Opción inválida. Intenta de nuevo.");
            }
        }
    }

    private static void mostrarRepuestos(InventarioService svc) throws Exception {
        List<Repuesto> list = svc.verRepuestos();
        System.out.println("\n-- Lista de Repuestos --");
        for (Repuesto r : list) {
            System.out.printf(
                "[SKU %d] %s | Cant: %d | Precio: %d | Cat: %s | Disp: %b%n",
                r.getSku(), r.getNombre(), r.getCantidad(),
                r.getPrecio(), r.getCategoria(), r.isDisponible()
            );
        }
    }

    private static void consultarRepuestoPorSku(InventarioService svc, Scanner sc) throws Exception {
        System.out.print("\nSKU: ");
        int sku = Integer.parseInt(sc.nextLine());
        Repuesto r = svc.consultarRepuesto(sku);
        if (r != null) {
            System.out.printf(
                "\nDetalles del Repuesto:\nSKU: %d%nNombre: %s%nCantidad: %d%nPrecio: %d%nCategoría: %s%nDisponible: %b%n",
                r.getSku(), r.getNombre(), r.getCantidad(),
                r.getPrecio(), r.getCategoria(), r.isDisponible()
            );
        } else {
            System.out.println("No existe ese SKU.");
        }
    }

    private static void mostrarReservas(InventarioService svc) throws Exception {
        List<Reserva> lista = svc.verReservas();
        System.out.println("\n-- Lista de Reservas --");
        for (Reserva r : lista) {
            System.out.printf(
                "[Reserva %d] Vehículo ID: %d | SKU: %d | Cantidad: %d%n",
                r.getIdReserva(), r.getIdVehiculo(), r.getSku(), r.getCantidad()
            );
        }
    }

    private static void consultarReservaPorId(InventarioService svc, Scanner sc) throws Exception {
        Reserva r = null;
        while (r == null) {
            System.out.print("\nID de Reserva: ");
            int id;
            try {
                id = Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("ID inválido. Ingresa un número entero.");
                continue;
            }
            r = svc.consultarReserva(id);
            if (r == null) {
                System.out.println("No existe una reserva con ese ID. Intenta nuevamente.");
            }
        }
        System.out.printf(
            "\nDetalles de la Reserva:\nID Reserva: %d%nVehículo ID: %d%nSKU: %d%nCantidad: %d%n",
            r.getIdReserva(), r.getIdVehiculo(), r.getSku(), r.getCantidad()
        );
    }
}
database.java:
package com.empresa.inventario;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class Database {
    private static final String URL  = "jdbc:mysql://localhost:3306/bd_lyl?serverTimezone=UTC";
    private static final String USER = "root";
    private static final String PASS = "axeler8";

    static {
        try { Class.forName("com.mysql.cj.jdbc.Driver"); }
        catch (Exception e) { throw new RuntimeException(e); }
    }

    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASS);
    }

    public static List<Repuesto> obtenerTodosRepuestos() {
        String sql = "SELECT sku, nombre, cantidad, precio, categoria, disponible FROM repuestos";
        List<Repuesto> list = new ArrayList<>();
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                String cat  = rs.getString("categoria");
                boolean disp = "1".equals(rs.getString("disponible"));
                list.add(new Repuesto(
                    rs.getInt("sku"),
                    rs.getString("nombre"),
                    rs.getInt("cantidad"),
                    rs.getInt("precio"),
                    cat,
                    disp
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    public static Repuesto obtenerRepuestoPorSku(int sku) {
        String sql = "SELECT sku, nombre, cantidad, precio, categoria, disponible FROM repuestos WHERE sku = ?";
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, sku);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    String cat  = rs.getString("categoria");
                    boolean disp = "1".equals(rs.getString("disponible"));
                    return new Repuesto(
                        rs.getInt("sku"),
                        rs.getString("nombre"),
                        rs.getInt("cantidad"),
                        rs.getInt("precio"),
                        cat,
                        disp
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static void insertarRepuesto(int idUbicacion, int sku, int cantidad, int precio, String categoria, boolean disponible, String nombre) {
        String sql = "INSERT INTO repuestos(idUbicacion, sku, cantidad, precio, categoria, disponible, nombre) VALUES(?,?,?,?,?,?,?)";
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, idUbicacion);
            ps.setInt(2, sku);
            ps.setInt(3, cantidad);
            ps.setInt(4, precio);
            ps.setString(5, categoria);
            ps.setString(6, disponible ? "1" : "0");
            ps.setString(7, nombre);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void actualizarStock(int idUbicacion, int sku, int delta) {
        String sql = "UPDATE repuestos SET cantidad = cantidad + ? WHERE idUbicacion = ? AND sku = ?";
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, delta);
            ps.setInt(2, idUbicacion);
            ps.setInt(3, sku);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static List<Reserva> obtenerTodasReservas() {
        String sql = "SELECT idReserva, idVehiculo, sku, cantidad FROM reservas";
        List<Reserva> list = new ArrayList<>();
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                list.add(new Reserva(
                    rs.getInt("idReserva"),
                    rs.getInt("idVehiculo"),
                    rs.getInt("sku"),
                    rs.getInt("cantidad")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    public static Reserva obtenerReservaPorId(int idReserva) {
        String sql = "SELECT idReserva, idVehiculo, sku, cantidad FROM reservas WHERE idReserva = ?";
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, idReserva);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new Reserva(
                        rs.getInt("idReserva"),
                        rs.getInt("idVehiculo"),
                        rs.getInt("sku"),
                        rs.getInt("cantidad")
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static void insertarReserva(int idVehiculo, int sku, int cantidad) {
        String sql = "INSERT INTO reservas(idVehiculo, sku, cantidad, fecha) VALUES(?,?,?,NOW())";
        try (Connection c = getConnection()) {
            // Insertar reserva
            try (PreparedStatement ps = c.prepareStatement(sql)) {
                ps.setInt(1, idVehiculo);
                ps.setInt(2, sku);
                ps.setInt(3, cantidad);
                ps.executeUpdate();
            }
            // Obtener idUbicacion
            int idUbicacion;
            String selUb = "SELECT idUbicacion FROM repuestos WHERE sku = ?";
            try (PreparedStatement ps2 = c.prepareStatement(selUb)) {
                ps2.setInt(1, sku);
                try (ResultSet rs = ps2.executeQuery()) {
                    if (!rs.next()) return;
                    idUbicacion = rs.getInt("idUbicacion");
                }
            }
            // Descontar stock
            actualizarStock(idUbicacion, sku, -cantidad);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void eliminarReserva(int idReserva) {
        try (Connection c = getConnection()) {
            // 1. Leer la reserva
            String sel = "SELECT sku, cantidad FROM reservas WHERE idReserva = ?";
            int sku, cantidad;
            try (PreparedStatement ps = c.prepareStatement(sel)) {
                ps.setInt(1, idReserva);
                try (ResultSet rs = ps.executeQuery()) {
                    if (!rs.next()) return;  // no existe la reserva
                    sku = rs.getInt("sku");
                    cantidad = rs.getInt("cantidad");
                }
            }

            // 2. Obtener idUbicacion del repuesto
            String selUb = "SELECT idUbicacion FROM repuestos WHERE sku = ?";
            int idUbicacion;
            try (PreparedStatement ps2 = c.prepareStatement(selUb)) {
                ps2.setInt(1, sku);
                try (ResultSet rs2 = ps2.executeQuery()) {
                    if (!rs2.next()) return; 
                    idUbicacion = rs2.getInt("idUbicacion");
                }
            }

            // 3. Devolver stock
            actualizarStock(idUbicacion, sku, cantidad);

            // 4. Borrar reserva
            String del = "DELETE FROM reservas WHERE idReserva = ?";
            try (PreparedStatement ps3 = c.prepareStatement(del)) {
                ps3.setInt(1, idReserva);
                ps3.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Métodos nuevos para RMI impl:

    public static int obtenerStockTotalPorUbicacion(int idUbicacion) {
        String sql = "SELECT COALESCE(SUM(cantidad),0) AS total FROM repuestos WHERE idUbicacion = ?";
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, idUbicacion);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("total");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }

    public static Ubicacion obtenerUbicacionPorId(int id) {
        String sql = "SELECT idUbicacion, nombre, direccion, capacidad FROM ubicaciones WHERE idUbicacion = ?";
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new Ubicacion(
                        rs.getInt("idUbicacion"),
                        rs.getString("nombre"),
                        rs.getString("direccion"),
                        rs.getInt("capacidad")
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static Vehiculo obtenerVehiculoPorId(int id) {
        String sql = "SELECT idVehiculo, anio, idUbicacion, nombre, modelo, cilindraje, color FROM vehiculos WHERE idVehiculo = ?";
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new Vehiculo(
                        rs.getInt("idVehiculo"),
                        rs.getInt("anio"),
                        rs.getInt("idUbicacion"),
                        rs.getString("nombre"),
                        rs.getString("modelo"),
                        rs.getString("cilindraje"),
                        rs.getString("color")
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static Repuesto obtenerRepuestoPorUbicacion(int idUbicacion, int sku) {
        String sql = "SELECT sku, nombre, cantidad, precio, categoria, disponible FROM repuestos WHERE idUbicacion = ? AND sku = ?";
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, idUbicacion);
            ps.setInt(2, sku);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    String cat  = rs.getString("categoria");
                    boolean disp = "1".equals(rs.getString("disponible"));
                    return new Repuesto(
                        rs.getInt("sku"),
                        rs.getString("nombre"),
                        rs.getInt("cantidad"),
                        rs.getInt("precio"),
                        cat,
                        disp
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
}
inventarioservice.java:
package com.empresa.inventario;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;

public interface InventarioService extends Remote {
    List<Repuesto> verRepuestos() throws RemoteException;
    Repuesto consultarRepuesto(int sku) throws RemoteException;
    void agregarRepuesto(int idUbicacion, int sku, int cantidad, int precio, String categoria, boolean disponible, String nombre) throws RemoteException;
    void liberarRepuesto(int idUbicacion, int sku, int cantidad) throws RemoteException;

    List<Reserva> verReservas() throws RemoteException;
    Reserva consultarReserva(int idReserva) throws RemoteException;
    void agregarReserva(int idVehiculo, int sku, int cantidad) throws RemoteException;
    void liberarReserva(int idReserva) throws RemoteException;

    Ubicacion consultarUbicacion(int idUbicacion) throws RemoteException;
    int consultarStockUbicacion(int idUbicacion) throws RemoteException;
    Vehiculo consultarVehiculo(int idVehiculo) throws RemoteException;
    Repuesto consultarRepuestoEnUbicacion(int idUbicacion, int sku) throws RemoteException;
}
inventarioserviceimpl.java:
package com.empresa.inventario;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;

public class InventarioServiceImpl extends UnicastRemoteObject implements InventarioService {
    public InventarioServiceImpl() throws RemoteException {
        super();
    }

    @Override
    public List<Repuesto> verRepuestos() throws RemoteException {
        return Database.obtenerTodosRepuestos();
    }

    @Override
    public Repuesto consultarRepuesto(int sku) throws RemoteException {
        return Database.obtenerRepuestoPorSku(sku);
    }

    @Override
    public void agregarRepuesto(int idUbicacion, int sku, int cantidad, int precio, String categoria, boolean disponible, String nombre) throws RemoteException {
        Database.insertarRepuesto(idUbicacion, sku, cantidad, precio, categoria, disponible, nombre);
    }

    @Override
    public void liberarRepuesto(int idUbicacion, int sku, int cantidad) throws RemoteException {
        Database.actualizarStock(idUbicacion, sku, -cantidad);
    }

    @Override
    public List<Reserva> verReservas() throws RemoteException {
        return Database.obtenerTodasReservas();
    }

    @Override
    public Reserva consultarReserva(int idReserva) throws RemoteException {
        return Database.obtenerReservaPorId(idReserva);
    }

    @Override
    public void agregarReserva(int idVehiculo, int sku, int cantidad) throws RemoteException {
        Database.insertarReserva(idVehiculo, sku, cantidad);
    }

    @Override
    public void liberarReserva(int idReserva) throws RemoteException {
        Database.eliminarReserva(idReserva);
    }

    @Override
    public Ubicacion consultarUbicacion(int idUbicacion) throws RemoteException {
        return Database.obtenerUbicacionPorId(idUbicacion);
    }

    @Override
    public int consultarStockUbicacion(int idUbicacion) throws RemoteException {
        return Database.obtenerStockTotalPorUbicacion(idUbicacion);
    }

    @Override
    public Vehiculo consultarVehiculo(int idVehiculo) throws RemoteException {
        return Database.obtenerVehiculoPorId(idVehiculo);
    }

    @Override
    public Repuesto consultarRepuestoEnUbicacion(int idUbicacion, int sku) throws RemoteException {
        return Database.obtenerRepuestoPorUbicacion(idUbicacion, sku);
    }
}
repuesto.java:
package com.empresa.inventario;

import java.io.Serializable;

public class Repuesto implements Serializable {
    private int sku;
    private String nombre;
    private int cantidad;
    private int precio;
    private String categoria;      // ahora String
    private boolean disponible;

    public Repuesto(int sku, String nombre, int cantidad, int precio, String categoria, boolean disponible) {
        this.sku        = sku;
        this.nombre     = nombre;
        this.cantidad   = cantidad;
        this.precio     = precio;
        this.categoria  = categoria;
        this.disponible = disponible;
    }

    public int getSku()            { return sku; }
    public String getNombre()      { return nombre; }
    public int getCantidad()       { return cantidad; }
    public int getPrecio()         { return precio; }
    public String getCategoria()   { return categoria; }   // getter String
    public boolean isDisponible()  { return disponible; }
}
reserva.java:
package com.empresa.inventario;

import java.io.Serializable;

public class Reserva implements Serializable {
    private int idReserva;
    private int idVehiculo;
    private int sku;
    private int cantidad;

    public Reserva(int idReserva, int idVehiculo, int sku, int cantidad) {
        this.idReserva = idReserva;
        this.idVehiculo = idVehiculo;
        this.sku = sku;
        this.cantidad = cantidad;
    }
    public int getIdReserva() { return idReserva; }
    public int getIdVehiculo() { return idVehiculo; }
    public int getSku() { return sku; }
    public int getCantidad() { return cantidad; }
}
ubicacion.java:
package com.empresa.inventario;

import java.io.Serializable;

public class Ubicacion implements Serializable {
    private int idUbicacion;
    private String nombre;
    private String direccion;
    private int capacidad;

    public Ubicacion(int idUbicacion, String nombre, String direccion, int capacidad) {
        this.idUbicacion = idUbicacion;
        this.nombre      = nombre;
        this.direccion   = direccion;
        this.capacidad   = capacidad;
    }

    public int getIdUbicacion() { return idUbicacion; }
    public String getNombre()       { return nombre;      }
    public String getDireccion()    { return direccion;   }
    public int getCapacidad()       { return capacidad;   }
}
vehiculo.java:
package com.empresa.inventario;

import java.io.Serializable;

public class Vehiculo implements Serializable {
    private int idVehiculo;
    private int anio;
    private int idUbicacion;
    private String nombre;
    private String modelo;
    private String cilindraje;
    private String color;

    public Vehiculo(int idVehiculo, int anio, int idUbicacion, String nombre, String modelo, String cilindraje, String color) {
        this.idVehiculo  = idVehiculo;
        this.anio        = anio;
        this.idUbicacion = idUbicacion;
        this.nombre      = nombre;
        this.modelo      = modelo;
        this.cilindraje  = cilindraje;
        this.color       = color;
    }

    public int getIdVehiculo()    { return idVehiculo; }
    public int getAnio()          { return anio;       }
    public int getIdUbicacion()   { return idUbicacion;}
    public String getNombre()     { return nombre;    }
    public String getModelo()     { return modelo;    }
    public String getCilindraje() { return cilindraje;}
    public String getColor()      { return color;     }
}
consolataller.java:
package com.empresa.taller;

import com.empresa.inventario.InventarioService;
import com.empresa.inventario.Repuesto;
import com.empresa.inventario.Reserva;
import com.empresa.inventario.Ubicacion;
import com.empresa.inventario.Vehiculo;

import java.rmi.Naming;
import java.util.List;
import java.util.Scanner;

public class ConsolaTaller {
    public static void main(String[] args) throws Exception {
        InventarioService svc = (InventarioService) Naming.lookup("rmi://localhost:1099/InventarioService");
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- Consola Taller ---");
            System.out.println("1) Ver repuestos");
            System.out.println("2) Consultar repuesto por SKU");
            System.out.println("3) Agregar repuesto");
            System.out.println("4) Liberar repuesto");
            System.out.println("5) Ver reservas");
            System.out.println("6) Consultar reserva por ID");
            System.out.println("7) Agregar reserva");
            System.out.println("8) Liberar reserva");
            System.out.println("9) Salir");
            System.out.print("Selecciona una opción: ");
            int op = Integer.parseInt(sc.nextLine());

            switch (op) {
                case 1: mostrarRepuestos(svc); break;
                case 2: consultarRepuestoPorSku(svc, sc); break;
                case 3: agregarRepuesto(svc, sc); break;
                case 4: liberarRepuesto(svc, sc); break;
                case 5: mostrarReservas(svc); break;
                case 6: consultarReservaPorId(svc, sc); break;
                case 7: agregarReserva(svc, sc); break;
                case 8: liberarReserva(svc, sc); break;
                case 9:
                    System.out.println("Saliendo...");
                    sc.close();
                    System.exit(0);
                default:
                    System.out.println("Opción inválida. Intenta de nuevo.");
            }
        }
    }

    private static void mostrarRepuestos(InventarioService svc) throws Exception {
        List<Repuesto> list = svc.verRepuestos();
        System.out.println("\n-- Lista de Repuestos --");
        for (Repuesto r : list) {
            System.out.printf("[SKU %d] %s | Cant: %d | Precio: %d | Cat: %s | Disp: %b%n",
                r.getSku(), r.getNombre(), r.getCantidad(), r.getPrecio(), r.getCategoria(), r.isDisponible());
        }
    }

    private static void consultarRepuestoPorSku(InventarioService svc, Scanner sc) throws Exception {
        Repuesto r = null;
        while (r == null) {
            System.out.print("\nSKU: ");
            int sku;
            try {
                sku = Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("SKU inválido. Ingresa un número entero.");
                continue;
            }
            r = svc.consultarRepuesto(sku);
            if (r == null) {
                System.out.println("No existe ese SKU. Intenta nuevamente.");
            }
        }
        System.out.printf(
            "\nDetalles del Repuesto:\n" +
            "SKU: %d%n" +
            "Nombre: %s%n" +
            "Cantidad: %d%n" +
            "Precio: %d%n" +
            "Categoría: %s%n" +
            "Disponible: %b%n",
            r.getSku(), r.getNombre(), r.getCantidad(), r.getPrecio(), r.getCategoria(), r.isDisponible()
        );
    }

    private static void agregarRepuesto(InventarioService svc, Scanner sc) throws Exception {
        System.out.println("\n-- Agregar Repuesto --");
        int idUb;
        while (true) {
            System.out.print("ID de Ubicación: ");
            idUb = Integer.parseInt(sc.nextLine());
            if (svc.consultarUbicacion(idUb) == null) {
                System.out.println("⚠ Ubicación inexistente. Intenta de nuevo.");
            } else {
                break;
            }
        }
        Ubicacion ub = svc.consultarUbicacion(idUb);

        int sku;
        while (true) {
            System.out.print("SKU: ");
            sku = Integer.parseInt(sc.nextLine());
            if (svc.consultarRepuesto(sku) != null) {
                System.out.println("⚠ SKU ya existe. Intenta otro.");
            } else {
                break;
            }
        }

        int cantidad;
        while (true) {
            System.out.print("Cantidad: ");
            cantidad = Integer.parseInt(sc.nextLine());
            int stockActual = svc.consultarStockUbicacion(idUb);
            if (stockActual + cantidad > ub.getCapacidad()) {
                System.out.printf("⚠ Excede capacidad. Actual: %d, Máxima: %d. Intenta de nuevo.%n", stockActual, ub.getCapacidad());
            } else {
                break;
            }
        }

        System.out.print("Precio: ");
        int precio = Integer.parseInt(sc.nextLine());

        System.out.print("Categoría (texto): ");
        String categoria = sc.nextLine().trim();

        boolean disponible;
        while (true) {
            System.out.print("Disponible (1=si / 0=no): ");
            String in = sc.nextLine().trim();
            if ("1".equals(in)) { disponible = true; break; }
            if ("0".equals(in)) { disponible = false; break; }
            System.out.println("⚠ Responde 1 o 0. Intenta de nuevo.");
        }

        System.out.print("Nombre: ");
        String nombre = sc.nextLine().trim();

        svc.agregarRepuesto(idUb, sku, cantidad, precio, categoria, disponible, nombre);
        System.out.println("✔ Repuesto agregado.");
    }

    private static void liberarRepuesto(InventarioService svc, Scanner sc) throws Exception {
        System.out.println("\n-- Liberar Repuesto --");
        System.out.print("ID de Ubicación: ");
        int idUb = Integer.parseInt(sc.nextLine());

        Repuesto rep;
        int sku;
        while (true) {
            System.out.print("SKU: ");
            sku = Integer.parseInt(sc.nextLine());
            rep = svc.consultarRepuestoEnUbicacion(idUb, sku);
            if (rep == null) {
                System.out.println("⚠ No existe el SKU " + sku + " en la ubicación " + idUb + ". Intenta de nuevo.");
            } else {
                break;
            }
        }

        while (true) {
            System.out.print("Cantidad a liberar (máx " + rep.getCantidad() + "): ");
            int cantidad = Integer.parseInt(sc.nextLine());
            if (cantidad < 1 || cantidad > rep.getCantidad()) {
                System.out.println("⚠ Cantidad inválida. Debe estar entre 1 y " + rep.getCantidad() + ". Intenta de nuevo.");
            } else {
                svc.liberarRepuesto(idUb, sku, cantidad);
                System.out.println("✔ Repuesto liberado.");
                break;
            }
        }
    }

    private static void mostrarReservas(InventarioService svc) throws Exception {
        List<Reserva> lista = svc.verReservas();
        System.out.println("\n-- Lista de Reservas --");
        for (Reserva r : lista) {
            System.out.printf("[Reserva %d] Vehículo ID: %d | SKU: %d | Cantidad: %d%n",
                r.getIdReserva(), r.getIdVehiculo(), r.getSku(), r.getCantidad());
        }
    }

    private static void consultarReservaPorId(InventarioService svc, Scanner sc) throws Exception {
        Reserva r = null;
        while (r == null) {
            System.out.print("\nID de Reserva: ");
            int id;
            try {
                id = Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("ID inválido. Ingresa un número entero.");
                continue;
            }
            r = svc.consultarReserva(id);
            if (r == null) {
                System.out.println("No existe una reserva con ese ID. Intenta nuevamente.");
            }
        }
        System.out.printf(
            "\nDetalles de la Reserva:\nID Reserva: %d%nVehículo ID: %d%nSKU: %d%nCantidad: %d%n",
            r.getIdReserva(), r.getIdVehiculo(), r.getSku(), r.getCantidad()
        );
    }

    private static void agregarReserva(InventarioService svc, Scanner sc) throws Exception {
        System.out.println("\n-- Agregar Reserva --");
        int idVeh;
        while (true) {
            System.out.print("ID de Vehículo: ");
            idVeh = Integer.parseInt(sc.nextLine());
            Vehiculo veh = svc.consultarVehiculo(idVeh);
            if (veh == null) {
                System.out.println("⚠ Vehículo no encontrado. Intenta de nuevo.");
            } else {
                break;
            }
        }

        Repuesto rep;
        int sku;
        while (true) {
            System.out.print("SKU: ");
            sku = Integer.parseInt(sc.nextLine());
            rep = svc.consultarRepuesto(sku);
            if (rep == null) {
                System.out.println("⚠ No existe el SKU " + sku + ". Intenta de nuevo.");
            } else if (rep.getCantidad() < 1) {
                System.out.println("⚠ No hay stock disponible para el SKU " + sku + ".");
                return;
            } else {
                break;
            }
        }

        int cantidad;
        while (true) {
            System.out.print("Cantidad a reservar (máx " + rep.getCantidad() + "): ");
            cantidad = Integer.parseInt(sc.nextLine());
            if (cantidad < 1 || cantidad > rep.getCantidad()) {
                System.out.println("⚠ Cantidad inválida. Debe estar entre 1 y " + rep.getCantidad() + ". Intenta de nuevo.");
            } else {
                break;
            }
        }

        svc.agregarReserva(idVeh, sku, cantidad);
        System.out.println("✔ Reserva creada.");
    }

    private static void liberarReserva(InventarioService svc, Scanner sc) throws Exception {
        System.out.println("\n-- Liberar Reserva --");
        System.out.print("ID de Reserva: ");
        int idRes = Integer.parseInt(sc.nextLine());

        svc.liberarReserva(idRes);
        System.out.println("✔ Reserva liberada.");
    }
}

inventario-routing.module.ts:
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { InventarioPage } from './inventario.page';

const routes: Routes = [
  {
    path: '',
    component: InventarioPage
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule],
})
export class InventarioPageRoutingModule {}

inventario.module.ts:
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

import { IonicModule } from '@ionic/angular';

import { InventarioPageRoutingModule } from './inventario-routing.module';

import { InventarioPage } from './inventario.page';

@NgModule({
  imports: [
    CommonModule,
    FormsModule,
    IonicModule,
    InventarioPageRoutingModule
  ],
  declarations: [InventarioPage]
})
export class InventarioPageModule {}

inventario.page.html:
<ion-content class="ion-padding">
  <div class="breadcrumb">
    <a [routerLink]="'/home'">Administración</a> &rarr; 
    <span>Modificar stock</span>
  </div>
  <ion-grid>
    <ion-row>

      <!-- Columna Repuestos -->
      <ion-col size="12" size-md="6">
        <ion-card class="fade-in">
          <ion-card-header class="card-header-flex">
            <ion-card-title>Repuestos</ion-card-title>
            <ion-button *ngIf="modo.startsWith('repuesto')" fill="clear" (click)="setModo('')" class="volver-btn">← Volver</ion-button>
          </ion-card-header>

          <ion-card-content *ngIf="modo === '' || modo.startsWith('reserva')">
            <ion-button expand="block" (click)="setModo('repuestoVer')">Ver Repuestos</ion-button>
            <ion-button expand="block" (click)="setModo('repuestoConsultar')">Consultar por SKU</ion-button>
            <ion-button expand="block" (click)="setModo('repuestoAgregar')">Agregar Repuesto</ion-button>
            <ion-button expand="block" (click)="setModo('repuestoLiberar')">Liberar Repuesto</ion-button>
          </ion-card-content>

          <ion-card-content *ngIf="modo === 'repuestoVer'">
            <h2>📦 Repuestos disponibles</h2>
            <ion-text>Listado de repuestos aquí...</ion-text>
          </ion-card-content>

          <ion-card-content *ngIf="modo === 'repuestoConsultar'">
            <h2>🔍 Consultar Repuesto</h2>
            <ion-item><ion-label position="stacked">SKU</ion-label><ion-input></ion-input></ion-item>
            <ion-button expand="block">Buscar</ion-button>
          </ion-card-content>

          <ion-card-content *ngIf="modo === 'repuestoAgregar'">
            <h2>➕ Agregar Repuesto</h2>
            <ion-item><ion-label position="stacked">ID Ubicación</ion-label><ion-input></ion-input></ion-item>
            <ion-item><ion-label position="stacked">SKU</ion-label><ion-input></ion-input></ion-item>
            <ion-item><ion-label position="stacked">Cantidad</ion-label><ion-input></ion-input></ion-item>
            <ion-item><ion-label position="stacked">Precio</ion-label><ion-input></ion-input></ion-item>
            <ion-item><ion-label position="stacked">Categoría</ion-label><ion-input></ion-input></ion-item>
            <ion-item><ion-label>Disponible</ion-label><ion-toggle></ion-toggle></ion-item>
            <ion-item><ion-label position="stacked">Nombre</ion-label><ion-input></ion-input></ion-item>
            <ion-button expand="block" color="success">Agregar</ion-button>
          </ion-card-content>

          <ion-card-content *ngIf="modo === 'repuestoLiberar'">
            <h2>➖ Liberar Repuesto</h2>
            <ion-item><ion-label position="stacked">ID Ubicación</ion-label><ion-input></ion-input></ion-item>
            <ion-item><ion-label position="stacked">SKU</ion-label><ion-input></ion-input></ion-item>
            <ion-item><ion-label position="stacked">Cantidad</ion-label><ion-input></ion-input></ion-item>
            <ion-button expand="block" color="danger">Liberar</ion-button>
          </ion-card-content>
        </ion-card>
      </ion-col>

      <!-- Columna Reservas -->
      <ion-col size="12" size-md="6">
        <ion-card class="fade-in">
          <ion-card-header class="card-header-flex">
            <ion-card-title>Reservas</ion-card-title>
            <ion-button *ngIf="modo.startsWith('reserva')" fill="clear" (click)="setModo('')" class="volver-btn">← Volver</ion-button>
          </ion-card-header>

          <ion-card-content *ngIf="modo === '' || modo.startsWith('repuesto')">
            <ion-button expand="block" (click)="setModo('reservaVer')">Ver Reservas</ion-button>
            <ion-button expand="block" (click)="setModo('reservaConsultar')">Consultar por ID</ion-button>
            <ion-button expand="block" (click)="setModo('reservaAgregar')">Agregar Reserva</ion-button>
            <ion-button expand="block" (click)="setModo('reservaLiberar')">Liberar Reserva</ion-button>
          </ion-card-content>

          <ion-card-content *ngIf="modo === 'reservaVer'">
            <h2>📋 Reservas registradas</h2>
            <ion-text>Listado de reservas aquí...</ion-text>
          </ion-card-content>

          <ion-card-content *ngIf="modo === 'reservaConsultar'">
            <h2>🔎 Consultar Reserva</h2>
            <ion-item><ion-label position="stacked">ID Reserva</ion-label><ion-input></ion-input></ion-item>
            <ion-button expand="block">Buscar</ion-button>
          </ion-card-content>

          <ion-card-content *ngIf="modo === 'reservaAgregar'">
            <h2>➕ Agregar Reserva</h2>
            <ion-item><ion-label position="stacked">ID Vehículo</ion-label><ion-input></ion-input></ion-item>
            <ion-item><ion-label position="stacked">SKU</ion-label><ion-input></ion-input></ion-item>
            <ion-item><ion-label position="stacked">Cantidad</ion-label><ion-input></ion-input></ion-item>
            <ion-button expand="block" color="success">Agregar</ion-button>
          </ion-card-content>

          <ion-card-content *ngIf="modo === 'reservaLiberar'">
            <h2>➖ Liberar Reserva</h2>
            <ion-item><ion-label position="stacked">ID Reserva</ion-label><ion-input></ion-input></ion-item>
            <ion-button expand="block" color="danger">Liberar</ion-button>
          </ion-card-content>
        </ion-card>
      </ion-col>

    </ion-row>
  </ion-grid>
</ion-content>

<style>
  .fade-in {
    animation: fadeSlide 0.4s ease-in-out;
  }

  @keyframes fadeSlide {
    from {
      opacity: 0;
      transform: translateY(15px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .card-header-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .volver-btn {
    margin-left: auto;
    font-size: 0.9rem;
  }
</style>
inventario.page.ts:
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-inventario',
  templateUrl: './inventario.page.html',
  styleUrls: ['./inventario.page.scss'],
  standalone: false,
})
export class InventarioPage implements OnInit {

  constructor() { }

  ngOnInit() {
  }
  // variable usada por *ngIf en el HTML
  modo: string = '';

  // método usado por los botones
  setModo(m: string) {
    this.modo = m;
    console.log('Modo cambiado a:', this.modo); // útil para debug
  }
}
app-routing.module.ts:
import { NgModule } from '@angular/core';
import { PreloadAllModules, RouterModule, Routes } from '@angular/router';

const routes: Routes = [
  {
    path: 'home',
    loadChildren: () => import('./pages/home/home.module').then( m => m.HomePageModule)
  },
  {
    path: '',
    redirectTo: 'home',
    pathMatch: 'full'
  },
  {
    path: 'productos',
    loadChildren: () => import('./pages/productos/productos.module').then( m => m.ProductosPageModule)
  },
  {
    path: 'servicios',
    loadChildren: () => import('./pages/servicios/servicios.module').then( m => m.ServiciosPageModule)
  },
  {
    path: 'quienes-somos',
    loadChildren: () => import('./pages/quienes-somos/quienes-somos.module').then( m => m.QuienesSomosPageModule)
  },
  {
    path: 'seleccion-servicio',
    loadChildren: () => import('./pages/seleccion-servicio/seleccion-servicio.module').then( m => m.SeleccionServicioPageModule)
  },
  {
    path: 'inventario',
    loadChildren: () => import('./pages/inventario/inventario.module').then( m => m.InventarioPageModule)
  },

];

@NgModule({
  imports: [
    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })
  ],
  exports: [RouterModule]
})
export class AppRoutingModule { }

app.component.html:
<ion-app>
  <app-header></app-header>
  <ion-content>
    <ion-router-outlet></ion-router-outlet>
  </ion-content>
  <app-footer></app-footer> 
</ion-app>

app.component.ts:
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html',
  styleUrls: ['app.component.scss'],
  standalone: false,
})
export class AppComponent {
  constructor() {}
}
app.module.ts:
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { RouteReuseStrategy } from '@angular/router';

import { IonicModule, IonicRouteStrategy } from '@ionic/angular';

import { AppComponent } from './app.component';
import { AppRoutingModule } from './app-routing.module';
import { FooterComponent } from './components/footer/footer.component';
import { HeaderComponent } from './components/header/header.component';


@NgModule({
  declarations: [AppComponent, HeaderComponent, FooterComponent],
  imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule],
  providers: [{ provide: RouteReuseStrategy, useClass: IonicRouteStrategy }],
  bootstrap: [AppComponent],
  exports:[HeaderComponent, FooterComponent]
})
export class AppModule {}
main.ts:
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.log(err));
